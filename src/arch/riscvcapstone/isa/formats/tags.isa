// -*- mode:c++ -*-

// Copyright (c) 2015 RISC-V Foundation
// Copyright (c) 2016 The University of Virginia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////
//
// Tag operation instructions
//
def format TagAccess(code = {{ }}, comp_code = {{ }}, *opt_flags) {{
    iop = InstObjParams(name, Name, 'RegNodeOp', {'code': code,
                        'comp_code': comp_code}, opt_flags)
    header_output = TagAccessDeclare.subst(iop)
    decoder_output = TagAccessConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = (TagAccessExecute.subst(iop)
                   + TagAccessCompleteAcc.subst(iop))
}};

def format TagAccessStore(code = {{ }}, comp_code = {{ }}, *opt_flags) {{
    iop = InstObjParams(name, Name, 'RegNodeOp', {'code': code,
                        'comp_code': comp_code}, opt_flags)
    header_output = TagAccessDeclare.subst(iop)
    decoder_output = TagAccessStoreConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = (TagAccessExecute.subst(iop)
                   + TagAccessCompleteAcc.subst(iop))
}};


def template TagAccessDeclare {{
    /**
     * Static instruction class for "%(mnemonic)s".
     */
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(ExtMachInst machInst);

        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault completeAcc(PacketPtr, ExecContext *,
                          Trace::InstRecord *) const override;
    };
}};

def template TagAccessConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst):
        %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;

        flags[IsLoad] = true;
    }
}};

def template TagAccessStoreConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst):
        %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;

        flags[IsStore] = true;
    }
}};

def template TagAccessExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        Addr EA;

        %(op_src_decl)s;
        %(op_rd)s;

        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst *dyn_inst = dynamic_cast<DynInst *>(xc);
        assert(dyn_inst);

        %(code)s;

        return NoFault;
    }
}};


def template TagAccessCompleteAcc {{
    Fault
    %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst *dyn_inst = dynamic_cast<DynInst *>(xc);
        assert(dyn_inst);
    
        %(comp_code)s;
        return NoFault;
    }
}};
