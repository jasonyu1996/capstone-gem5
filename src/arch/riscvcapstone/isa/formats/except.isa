// -*- mode:c++ -*-

// Copyright (c) 2015 RISC-V Foundation
// Copyright (c) 2016 The University of Virginia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////
//
// Exception operation instruction : except
//
def format Exception(code, *opt_flags) {{
    regs = ['srcRegIdx(0)']
    # TODO: Except is deriving from RevokeClass for now
    # for convenience - both take a single reg operand
    # Also using revoke templates
    # Maybe could rename revoke classes/templates 
    # to something more generic
    iop = InstObjParams(name, Name, 'RevokeClass',
           {'code': code, 'regs': ','.join(regs)},
            opt_flags)
    header_output = RevokeDeclare.subst(iop)
    decoder_output = RevokeConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = (ExceptExecute.subst(iop)
                  + ExceptCompleteAcc.subst(iop))
}};

def template ExceptExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        uint64_t Rs1;

        Rs1 = xc->getRegOperand(this, 0);

        {
            gem5::RiscvcapstoneISA::o3::DynInst *ptr =
                dynamic_cast<gem5::RiscvcapstoneISA::o3::DynInst *>(xc);
            Rs1 = ptr->cpuId();
            DPRINTFN("In Except! cpuId = %d\n", Rs1);

            const RegId regId = srcRegIdx(0);
            const RegIndex regIdx = regId.index();

            ThreadContext *tcBase = xc->tcBase();
            int threadId = tcBase->threadId();

            gem5::RiscvcapstoneISA::o3::DynInst *dyn_inst =
                dynamic_cast<gem5::RiscvcapstoneISA::o3::DynInst *>(xc);

            gem5::RiscvcapstoneISA::CapLoc regLoc =
                gem5::RiscvcapstoneISA::CapLoc::makeReg(threadId, regIdx);

            gem5::RiscvcapstoneISA::NodeID nodeId = 0;

            gem5::RiscvcapstoneISA::o3::NodeQuery qry =
                gem5::RiscvcapstoneISA::o3::NodeQuery(dyn_inst, nodeId);

            gem5::RiscvcapstoneISA::o3::NodeCommandPtr cmd = &qry;

            dyn_inst->initiateNodeCommand(cmd);

            //TODO: Actually switch the domain
            //Call and Except body same until now
            //Maybe switch domain in completeAcc instead
            //and have same initiateAcc for except and call?

            return NoFault;

        }

        return NoFault;
    }
}};

def template ExceptCompleteAcc {{
    Fault
    %(class_name)s::completeNodeAcc(ExecContext *xc, BaseCPU *cpu,
        gem5::RiscvcapstoneISA::o3::NodeCommand *cmd,
        Trace::InstRecord *traceData) const
    {
        return NoFault;
    }
}};
