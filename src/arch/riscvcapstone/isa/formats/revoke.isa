// -*- mode:c++ -*-

// Copyright (c) 2015 RISC-V Foundation
// Copyright (c) 2016 The University of Virginia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////
//
// Revoke operation instruction
//
def format Revoke(code, *opt_flags) {{
    regs = ['srcRegIdx(0)']
    iop = InstObjParams(name, Name, 'RevokeClass',
           {'code': code, 'regs': ','.join(regs)},
            opt_flags)
    header_output = RevokeDeclare.subst(iop)
    decoder_output = RevokeConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = (RevokeExecute.subst(iop)
                  + RevokeInitiateAcc.subst(iop)
                  + RevokeCompleteAcc.subst(iop))
}};

def template RevokeDeclare {{
    /**
     * Static instruction class for "%(mnemonic)s".
     */
    class %(class_name)s : public %(base_class)s
    {
        private:
            RegId srcRegIdxArr[1]; RegId destRegIdxArr[0];

        public:
        /// Constructor.
        %(class_name)s(ExtMachInst machInst);

        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault initiateNodeAcc(ExecContext *, BaseCPU *,
                              Trace::InstRecord *) const override;
        Fault completeNodeAcc(ExecContext *, BaseCPU *,
                              gem5::RiscvcapstoneISA::o3::NodeCommand *,
                              Trace::InstRecord *) const override;
    };
}};

def template RevokeConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst):
        %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
    setRegIdxArrays(
        reinterpret_cast<RegIdArrayPtr>(
            &std::remove_pointer_t<decltype(this)>::srcRegIdxArr),
        reinterpret_cast<RegIdArrayPtr>(
            &std::remove_pointer_t<decltype(this)>::destRegIdxArr));

    setSrcRegIdx(_numSrcRegs++,
                 ((RS1) == 0) ? RegId() : RegId(IntRegClass, RS1));

    flags[IsInteger] = true;
    isNodeOp = true;
    }
}};

def template RevokeExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        uint64_t Rs1;

        Rs1 = xc->getRegOperand(this, 0);

        {
            //gem5::RiscvcapstoneISA::o3::DynInst *ptr =
            //        dynamic_cast<gem5::RiscvcapstoneISA::o3::DynInst *>(xc);
            //Rs1 = ptr->cpuId();
            DPRINTFN("In revoke! Rs1 = %d\n", Rs1);
        }

        return NoFault;
    }
}};

def template RevokeInitiateAcc {{
    Fault
    %(class_name)s::initiateNodeAcc(ExecContext *xc, BaseCPU *cpu,
        Trace::InstRecord *traceData) const
    {
        return NoFault;
    }
}};

def template RevokeCompleteAcc {{
    Fault
    %(class_name)s::completeNodeAcc(ExecContext *xc, BaseCPU *cpu,
        gem5::RiscvcapstoneISA::o3::NodeCommand *cmd,
        Trace::InstRecord *traceData) const
    {
        return NoFault;
    }
}};