// -*- mode:c++ -*-

// Copyright (c) 2015 RISC-V Foundation
// Copyright (c) 2016 The University of Virginia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//insn format for world switching
def format CapEnter(code, comp_code, *opt_flags) {{
    regs = [] # FIXME: this is not actually used
    iop = InstObjParams(name, Name, 'CapEnterClass',
           {'code': code, 'comp_code': comp_code,
           'regs': ','.join(regs)},
            opt_flags)
    header_output = CapEnterDeclare.subst(iop)
    decoder_output = CapEnterConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = CapEnterExecute.subst(iop) + \
        CapEnterCompleteAcc.subst(iop)
}};

def template CapEnterDeclare {{
    /**
     * Static instruction class for "%(mnemonic)s".
     */
    class %(class_name)s : public %(base_class)s
    {  
        private:
        RegId srcRegIdxArr[NumIntArchRegs]; RegId destRegIdxArr[NumIntArchRegs];

        public:
        /// Constructor.
        %(class_name)s(ExtMachInst machInst);

        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault completeAcc(PacketPtr, ExecContext*, Trace::InstRecord*) const override;
    };
}};

def template CapEnterConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst):
        %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        setRegIdxArrays(
            reinterpret_cast<RegIdArrayPtr>(
                &std::remove_pointer_t<decltype(this)>::srcRegIdxArr),
            reinterpret_cast<RegIdArrayPtr>(
                &std::remove_pointer_t<decltype(this)>::destRegIdxArr));

        assert(_numSrcRegs == 0 && _numDestRegs == 0);

        for(int i = 1; i < NumIntArchRegs; i ++) {
            setSrcRegIdx(_numSrcRegs++, RegId(IntRegClass, i));
            setDestRegIdx(_numDestRegs++, RegId(IntRegClass, i));
        }

        flags[IsInteger] = true;
        flags[IsLoad] = true;
        flags[IsStore] = true;
        flags[IsCall] = true;
        flags[IsIndirectControl] = true;
        flags[IsUncondControl] = true;
        flags[IsNonSpeculative] = true;
        flags[IsSerializeAfter] = true;
        hasNodeOp = true;
    }
}};

def template CapEnterExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        %(op_decl)s;
        %(op_rd)s;

        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);

        %(code)s;

        %(op_wb)s;
    }
}};

def template CapEnterCompleteAcc {{
    Fault
    %(class_name)s::completeAcc(PacketPtr pkt, ExecContext* xc, Trace::InstRecord* traceData) const {
        %(op_decl)s;
        %(op_rd)s;

        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);
        
        %(comp_code)s;

        %(op_wb)s;
    }

}};

def format CapExit(code, *opt_flags) {{
    regs = [] # FIXME: this is not actually used
    iop = InstObjParams(name, Name, 'CapExitClass',
           {'code': code,
           'regs': ','.join(regs)},
            opt_flags)
    header_output = CapExitDeclare.subst(iop)
    decoder_output = CapEnterConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = CapExitExecute.subst(iop)
}};

def template CapExitDeclare {{
    /**
     * Static instruction class for "%(mnemonic)s".
     */
    class %(class_name)s : public %(base_class)s
    {  
        private:
        RegId srcRegIdxArr[NumIntArchRegs]; RegId destRegIdxArr[NumIntArchRegs];

        public:
        /// Constructor.
        %(class_name)s(ExtMachInst machInst);

        Fault execute(ExecContext *, Trace::InstRecord *) const override;
    };
}};

def template CapExitExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        %(op_decl)s;
        %(op_rd)s;

        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);

        %(code)s;

        %(op_wb)s;
    }
}};