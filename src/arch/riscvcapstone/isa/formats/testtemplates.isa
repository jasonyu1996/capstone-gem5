// -*- mode:c++ -*-

//Revoke
def template TestRevokeExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);
        
        NodeID node_id = static_cast<NodeID>(xc->getRegOperand(this, 0));
        return dyn_inst->initiateNodeCommand(new NodeRevoke(node_id));
    }
}};

//Query
def template TestQueryExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);
        
        NodeID node_id = static_cast<NodeID>(xc->getRegOperand(this, 0));
        return dyn_inst->initiateNodeCommand(new NodeQuery(node_id));
    }
}};

//RcUpdate
def template TestRcUpdateExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);
        
        NodeID node_id = static_cast<NodeID>(xc->getRegOperand(this, 0));
        DPRINTFN("Test RcUpdate node_id = %u\n", node_id);
        int delta = static_cast<int>(xc->getRegOperand(this, 1));
        DPRINTFN("delta = %u\n", delta);
        return dyn_inst->initiateNodeCommand(new NodeRcUpdate(node_id, delta));
    }
}};

//Alloc
def template TestAllocExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        using namespace gem5::RiscvcapstoneISA::o3;

        DPRINTFN("Testalloc parent id = %lu\n", xc->getRegOperand(this, 0));

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);
        
        auto& node_controller = dyn_inst->getNodeController();
        NodeID to_allocate = node_controller.tryAllocate();

        xc->setRegOperand(this, 0, to_allocate);

        
        NodeID node_id = static_cast<NodeID>(xc->getRegOperand(this, 0));
        return dyn_inst->initiateNodeCommand(new NodeAllocate(node_id, to_allocate));
    }
}};

//Drop
def template TestDropExecute {{
    Fault
    %(class_name)s::execute(
        ExecContext *xc, Trace::InstRecord *traceData) const
    {
        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);
        
        NodeID node_id = static_cast<NodeID>(xc->getRegOperand(this, 0));
        DPRINTFN("Test Drop node_id = %u\n", node_id);
        return dyn_inst->initiateNodeCommand(new NodeDrop(node_id));
    }
}};
