// -*- mode:c++ -*-

// Copyright (c) 2015 RISC-V Foundation
// Copyright (c) 2016 The University of Virginia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//
// Format for ops touching node tree
// Similar to a basic ROp, just adding a statement
// to the constructor setting hasNodeOp to true
//

def format RNodeOp(code, comp_code = {{ }}, *opt_flags) {{
    iop = InstObjParams(name, Name, 'RegNodeOp', {'code': code,
                        'comp_code': comp_code}, opt_flags)
    header_output = RNodeDeclare.subst(iop)
    decoder_output = RNodeConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = RNodeExecute.subst(iop)
}};

def template RNodeDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def template RNodeConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;

        hasNodeOp = true;
    }
}};

def template RNodeMemConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;

        //hasNodeOp = true;
    }
}};

def template RNodeStoreConstructor {{
    %(class_name)s::%(class_name)s(MachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;

        hasNodeOp = true;
        flags[IsStore] = true;
        flags[IsLoad] = false;
    }
}};


def template RNodeExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        %(op_decl)s;
        %(op_rd)s;
        %(code)s;
        %(op_wb)s;
        return NoFault;
    }
}};

def format RNodeMemOp(check_code,
                        ea_code, memacc_code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'RegNodeOp',
                        {'check_code': check_code,
                        'ea_code': ea_code,
                        'memacc_code': memacc_code}, opt_flags)
    header_output = RNodeMemDeclare.subst(iop)
    decoder_output = RNodeMemConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = (RNodeMemExecute.subst(iop)
                   + RNodeMemCompleteAcc.subst(iop))
}};

def template RNodeMemExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {

        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);

        %(op_decl)s;
        %(op_rd)s;

        %(ea_code)s;

        %(check_code)s;

        initiateMemRead(xc, traceData, EA, Mem, memAccessFlags);

        return NoFault;
    }
}};

def template RNodeMemCompleteAcc {{
    Fault
    %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
                        Trace::InstRecord* traceData) const
    {
        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);

        %(op_decl)s;
        %(op_rd)s;

        %(memacc_code)s;
        %(op_wb)s;
        return NoFault;
    }
}};

def template RNodeMemDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault completeAcc(PacketPtr, ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def format RNodeStoreMemOp(check_code,
                        ea_code, comp_code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'RegNodeOp', 
                        {'check_code': check_code, 
                        'ea_code': ea_code,
                        'comp_code': comp_code},
                         opt_flags)
    header_output = RNodeStoreMemDeclare.subst(iop)
    decoder_output = RNodeStoreConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = (RNodeStoreExecute.subst(iop)
                   + RNodeStoreMemCompleteAcc.subst(iop))
}};

def template RNodeStoreExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        Trace::InstRecord *traceData) const
    {
        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);

        %(op_decl)s;
        %(op_rd)s;

        %(ea_code)s;
        %(check_code)s;

        return NoFault;
    }
}};

def template RNodeStoreMemCompleteAcc {{
    Fault
    %(class_name)s::completeAcc(PacketPtr pkt, ExecContext *xc,
                        Trace::InstRecord* traceData) const
    {
        using namespace gem5::RiscvcapstoneISA::o3;

        DynInst* dyn_inst = dynamic_cast<DynInst*>(xc);
        assert(dyn_inst);
        %(op_decl)s;
        %(op_rd)s;

        %(comp_code)s;

        %(op_wb)s;
        return NoFault;
    }
}};


def template RNodeStoreMemDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(MachInst machInst);
        Fault execute(ExecContext *, Trace::InstRecord *) const override;
        Fault completeAcc(PacketPtr, ExecContext *, Trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};
